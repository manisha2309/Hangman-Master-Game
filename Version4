import tkinter as tk
from tkinter import messagebox
import random

class HangmanGUI:
    def _init_(self, master):
        self.master = master
        self.master.title("Hangman Game")
        self.master.geometry("600x400")
        self.master.configure(bg="#ADD8E6")  # Set background color here

        self.setup_instructions()

    def setup_instructions(self):
        self.instructions_window = tk.Toplevel(self.master)
        self.instructions_window.title("Instructions")
        self.instructions_window.geometry("400x300")
        self.instructions_window.configure(bg="#ADD8E6")

        instructions_label = tk.Label(self.instructions_window, text="""Welcome to Hangman Game!
        
        Instructions:
        1. Select a category from the dropdown menu.
        2. Select the difficulty level.
        3. Guess letters by typing them in the input field and pressing the Guess button.
        4. You have a limited number of attempts based on the selected difficulty.
        5. Try to guess the word before running out of attempts.
        
        Have fun playing Hangman!""", font=("Arial", 14), bg="#ADD8E6")
        instructions_label.pack(pady=20)

        start_button = tk.Button(self.instructions_window, text="Start Game", command=self.start_game, bg="#008CBA", fg="white", font=("Arial", 16))
        start_button.pack(pady=10)

    def start_game(self):
        self.instructions_window.destroy()

        # Set up the game UI here
        self.categories = {
            "Animals": ["dog", "cat", "elephant", "lion", "tiger", "giraffe", "zebra"],
            "Countries": ["usa", "uk", "france", "germany", "china", "india", "brazil"],
            "Fruits": ["apple", "banana", "orange", "grape", "pineapple", "strawberry", "watermelon"]
        }

        self.difficulty_levels = {
            "Easy": 6,
            "Medium": 4,
            "Hard": 2
        }

        self.selected_category = tk.StringVar()
        self.selected_category.set("Animals")  # Default category

        self.selected_difficulty = tk.StringVar()
        self.selected_difficulty.set("Easy")  # Default difficulty

        self.words = self.categories[self.selected_category.get()]
        self.word = random.choice(self.words)
        self.guessed_letters = []
        self.attempts_left = self.difficulty_levels[self.selected_difficulty.get()]

        # Category selection
        self.category_label = tk.Label(self.master, text="Select a Category:", font=("Arial", 20), bg="#ADD8E6")  # Set background color here and increase font size
        self.category_label.pack(pady=10)
        self.category_menu = tk.OptionMenu(self.master, self.selected_category, *self.categories.keys(), command=self.change_category)
        self.category_menu.config(bg="#ffffff", font=("Arial", 14))  # Set background color here
        self.category_menu.pack(pady=5)

        # Difficulty selection
        self.difficulty_label = tk.Label(self.master, text="Select Difficulty:", font=("Arial", 20), bg="#ADD8E6")  # Set background color here and increase font size
        self.difficulty_label.pack(pady=10)
        self.difficulty_menu = tk.OptionMenu(self.master, self.selected_difficulty, *self.difficulty_levels.keys(), command=self.change_difficulty)
        self.difficulty_menu.config(bg="#ffffff", font=("Arial", 14))  # Set background color here
        self.difficulty_menu.pack(pady=5)

        # Canvas for Hangman figure
        self.canvas = tk.Canvas(self.master, width=400, height=300, bg="#ffffff")
        self.canvas.pack(pady=20)

        # Hangman scaffold
        self.canvas.create_line(200, 50, 200, 100, width=3)
        self.canvas.create_line(200, 50, 300, 50, width=3)
        self.canvas.create_line(300, 50, 300, 100, width=3)
        self.canvas.create_line(250, 100, 250, 250, width=3)
        self.canvas.create_line(200, 250, 300, 250, width=3)

        # Word display
        self.label_word = tk.Label(self.master, text=self.display_word(), font=("Arial", 24), bg="#ADD8E6")  # Set background color here
        self.label_word.pack(pady=10)

        # Attempts left
        self.label_attempts = tk.Label(self.master, text="Attempts left: " + str(self.attempts_left), font=("Arial", 18), bg="#ADD8E6")  # Set background color here and decrease font size
        self.label_attempts.pack(pady=10)

        # Guess entry
        self.entry_guess = tk.Entry(self.master, font=("Arial", 16))
        self.entry_guess.pack(pady=5)

        # Guess button
        self.btn_guess = tk.Button(self.master, text="Guess", command=self.guess_letter, bg="#008CBA", fg="white", font=("Arial", 16))
        self.btn_guess.pack(pady=5)

    def change_category(self, event=None):
        self.words = self.categories[self.selected_category.get()]
        self.word = random.choice(self.words)
        self.guessed_letters = []
        self.attempts_left = self.difficulty_levels[self.selected_difficulty.get()]
        self.canvas.delete("all")  # Clear canvas
        self.label_word.config(text=self.display_word())
        self.label_attempts.config(text="Attempts left: " + str(self.attempts_left))

    def change_difficulty(self, event=None):
        self.attempts_left = self.difficulty_levels[self.selected_difficulty.get()]
        self.label_attempts.config(text="Attempts left: " + str(self.attempts_left))

    def display_word(self):
        displayed_word = ""
        for letter in self.word:
            if letter in self.guessed_letters:
                displayed_word += letter
            else:
                displayed_word += "_ "
        return displayed_word

    def draw_hangman(self):
        if self.attempts_left == 5:  # head
            self.canvas.create_oval(230, 100, 270, 140, width=3)
        elif self.attempts_left == 4:  # body
            self.canvas.create_line(250, 140, 250, 200, width=3)
        elif self.attempts_left == 3:  # left arm
            self.canvas.create_line(250, 150, 220, 170, width=3)
        elif self.attempts_left == 2:  # right arm
            self.canvas.create_line(250, 150, 280, 170, width=3)
        elif self.attempts_left == 1:  # left leg
            self.canvas.create_line(250, 200, 230, 240, width=3)
        elif self.attempts_left == 0:  # right leg
            self.canvas.create_line(250, 200, 270, 240, width=3)

    def guess_letter(self):
        guess = self.entry_guess.get().lower()

        # Validate the input
        if not guess.isalpha() or len(guess) != 1:
            messagebox.showerror("Invalid Input", "Please enter a valid single alphabetic character.")
            return

        self.entry_guess.delete(0, tk.END)

        if guess in self.guessed_letters:
            messagebox.showinfo("Hangman", "You've already guessed that letter!")
            return

        self.guessed_letters.append(guess)
        self.label_word.config(text=self.display_word())

        if guess not in self.word:
            self.attempts_left -= 1
            self.label_attempts.config(text="Attempts left: " + str(self.attempts_left))
            self.draw_hangman()

            if self.attempts_left == 0:
                play_again = messagebox.askyesno("Hangman", "Sorry, you ran out of attempts. The word was: " + self.word + "\nDo you want to play again?")
                if play_again:
                    self.restart_game()
                else:
                    self.master.destroy()
                return
        else:
            if "_" not in self.display_word():
                play_again = messagebox.askyesno("Hangman", "Congratulations! You guessed the word: " + self.word + "\nDo you want to play again?")
                if play_again:
                    self.restart_game()
                else:
                    self.master.destroy()

    def restart_game(self):
        self.change_category()
        self.entry_guess.focus_set()

def main():
    root = tk.Tk()
    HangmanGUI(root)
    root.mainloop()

if _name_ == "_main_":
    main()
      
       
       
       
        
   
       
