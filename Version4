%gui tk
import tkinter as tk
from tkinter import messagebox
import random

class HangmanGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Hangman Game")
        self.master.geometry("800x600")
        self.master.config(bg="green")  # Set background color here

        self.categories = {
            "Animals": ["dog", "cat", "elephant", "lion", "tiger", "giraffe", "zebra"],
            "Countries": ["usa", "uk", "france", "germany", "china", "india", "brazil"],
            "Fruits": ["apple", "banana", "orange", "grape", "pineapple", "strawberry", "watermelon"]
        }

        self.difficulty_levels = {
            "Easy": 8,
            "Medium": 6,
            "Hard": 4
        }

        self.category_var = tk.StringVar()
        self.difficulty_var = tk.StringVar()
        self.score_var = tk.IntVar()
        self.word = ""
        self.guessed_letters = []
        self.attempts = 0

        self.create_widgets()

    def create_widgets(self):
        # Category selection
        self.category_label = tk.Label(self.master, text="Select a Category:", font=("Arial", 18), bg="yellow")
        self.category_label.pack()
        self.category_menu = tk.OptionMenu(self.master, self.category_var, *self.categories.keys())
        self.category_menu.pack()

        # Difficulty selection
        self.difficulty_label = tk.Label(self.master, text="Select Difficulty:", font=("Arial", 18), bg="yellow")
        self.difficulty_label.pack()
        self.difficulty_menu = tk.OptionMenu(self.master, self.difficulty_var, *self.difficulty_levels.keys())
        self.difficulty_menu.pack()

        # Start button
        self.start_button = tk.Button(self.master, text="Start Game", command=self.start_game, font=("Arial", 16),bg="yellow")
        self.start_button.pack()

        # Score display
        self.score_label = tk.Label(self.master, text="Score: 0", font=("Arial", 16), bg="yellow")
        self.score_label.pack()

        # Word display
        self.word_display = tk.Label(self.master, text="", font=("Arial", 24), bg="yellow")
        self.word_display.pack()

        # Guess entry
        self.guess_entry = tk.Entry(self.master, font=("Arial", 18), bg="yellow")
        self.guess_entry.pack()

        # Submit button
        self.submit_button = tk.Button(self.master, text="Submit", command=self.check_guess, font=("Arial", 16),bg="yellow")
        self.submit_button.pack()

    def start_game(self):
        category = self.category_var.get()
        difficulty = self.difficulty_var.get()
        self.word = random.choice(self.categories[category])
        self.attempts = self.difficulty_levels[difficulty]
        self.guessed_letters = []
        self.update_word_display()
        self.update_score_display()

    def update_word_display(self):
        displayed_word = ""
        for letter in self.word:
            if letter in self.guessed_letters:
                displayed_word += letter
            else:
                displayed_word += "_"
        self.word_display.config(text=displayed_word)

    def update_score_display(self):
        self.score_label.config(text="Score: {}".format(self.score_var.get()))

    def check_guess(self):
        guess = self.guess_entry.get().lower()

        if len(guess) != 1 or not guess.isalpha():
            messagebox.showwarning("Invalid Guess", "Please enter a single letter.")
            return

        if guess in self.guessed_letters:
            messagebox.showwarning("Repeated Guess", "You've already guessed that letter.")
            return

        self.guessed_letters.append(guess)
        self.update_word_display()

        if guess not in self.word:
            self.attempts -= 1
            if self.attempts == 0:
                messagebox.showinfo("Game Over", "Sorry, you ran out of attempts. The word was: {}".format(self.word))
                self.score_var.set(self.score_var.get() - 1)
                self.update_score_display()
                self.start_game()
            else:
                messagebox.showinfo("Incorrect Guess", "Incorrect guess. Attempts left: {}".format(self.attempts))
        else:
            if "_" not in self.word_display.cget("text"):
                messagebox.showinfo("Congratulations", "Congratulations! You guessed the word: {}".format(self.word))
                self.score_var.set(self.score_var.get() + 1)
                self.update_score_display()
                self.start_game()
            else:
                messagebox.showinfo("Good Guess", "Good guess!")

def main():
    root = tk.Tk()
    hangman_game = HangmanGame(root)
    root.mainloop()

if __name__ == "__main__":
    main()
